Стек: Python 3, Flask, Pydantic

Задание 1:

Создать API для управления задачами. Пользователь должен иметь возможность создавать, просматривать задачи и обновлять/удалять (обновлять и удалять только свои). Добавить админа который может всё
- Получение списка всех задач
- Получение информации о конкретной задаче по её ID
- Обновление информации о задаче по её ID
- Удаление задачи по её ID

На пользователей предлагаю не уделять много внимания, просто захардкодить трех пользователей (user1, user2, admin), которые идентифицируются по заголовкам Authorization: Bearer {username}.

1. Используя Pydantic для валидации входных данных при создании и обновлении задачи. Поля задачи могут включать: заголовок, описание, статус задачи (например, "в ожидании", "в процессе", "завершено").
2. Логирование всех действий в бд
3. Добавить тесты созданных методов
4. Добавить тесты для сверки проекта со схемой OpenAPI 3


openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
paths:
  /tasks:
    get:
      summary: Get a list of tasks
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Task 1
                description:
                  type: string
                  example: Complete the project
      responses:
        '201':
          description: Task created successfully
  /tasks/{task_id}:
    get:
      summary: Get task details by ID
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
    put:
      summary: Update task details by ID
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Task
                description:
                  type: string
                  example: Review the code changes
      responses:
        '200':
          description: Task updated successfully
    delete:
      summary: Delete a task by ID
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully